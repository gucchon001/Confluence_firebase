{
  "id": "1478754305",
  "title": "作業記録_求人検索（条件なし）",
  "content": "📌 基本情報 対象クエリ名 / 概要 ：サービスサイト_求人検索（条件なし）で使用されるクエリ 担当エンジニア ： PM ： 関連画面/API ：求人一覧 目的 ： 現在、複数のスロークエリがサイト全体のパフォーマンスに悪影響を及ぼしているため 🧭 作業進行ステータス（チェック形式） 36 36 complete 対象クエリの特定（ログ調査完了） 37 37 complete 改善方針の設計（EXPLAIN分析、修正案レビュー） 38 38 complete DEV環境での性能検証 39 39 complete 本番DB複製での検証 40 40 complete PR作成・レビュー完了 41 41 incomplete 本番反映済み 42 42 incomplete スロークエリのログ確認 🛠 方針検討・設計 原因分析（EXPLAINなど） ： インデックスが適切に貼られていない 求人一覧での表示順のための並び替えの処理が重い 改善方針 ： クエリ構造変更 インデックス追加 条件式の見直し 想定される影響範囲 ： 特になし 現状の本番DBインデックス状況（対象テーブル） ： テーブル名： job_basic_informations テーブル名： classroom_basic_informations ✅ DEV検証結果 検証日 ： - 担当 ： （HT社） レスポンス比較（Before/After） ： Before：1.2-1.4s After：0.9s 修正前クエリ ： 修正後クエリ ： 修正前 EXPLAIN ANALYZE 結果 ： Sort row IDs: field(any_value(cbi.plan),1,2,3,6,4,5), group_station, group_job, greatest(coalesce(any_value(job_basic_informations.updated_at),'0000-00-00 00:00:00'),coalesce(any_value(cast(cbi.latest_review_open_date as datetime)),'0000-00-00 00:00:00')) DESC (actual time=1246..1478 rows=47120 loops=1) -> Table scan on (cost=5214..5216 rows=32.1) (actual time=1135..1205 rows=47120 loops=1) -> Temporary table (cost=5213..5213 rows=32.1) (actual time=1135..1135 rows=47120 loops=1) -> Nested loop left join (cost=5210 rows=32.1) (actual time=0.245..760 rows=47120 loops=1) -> Nested loop left join (cost=5187 rows=28.9) (actual time=0.235..670 rows=47120 loops=1) -> Nested loop left join (cost=5177 rows=28.4) (actual time=0.228..586 rows=47120 loops=1) -> Nested loop left join (cost=5167 rows=26.1) (actual time=0.217..503 rows=47120 loops=1) -> Nested loop left join (cost=5155 rows=23.9) (actual time=0.2..416 rows=47120 loops=1) -> Nested loop left join (cost=5146 rows=23.9) (actual time=0.193..400 rows=47120 loops=1) -> Nested loop left join (cost=5138 rows=23.9) (actual time=0.18..369 rows=47120 loops=1) -> Nested loop inner join (cost=5130 rows=23.7) (actual time=0.168..239 rows=47120 loops=1) -> Nested loop inner join (cost=5121 rows=23.7) (actual time=0.162..220 rows=47120 loops=1) -> Nested loop inner join (cost=5113 rows=23.7) (actual time=0.151..204 rows=47120 loops=1) -> Filter: ((job_basic_informations.publish_flag = 1) and (job_basic_informations.deleted_at is null)) (cost=4947 rows=475) (actual time=0.0578..74.9 rows=47160 loops=1) -> Table scan on job_basic_informations (cost=4947 rows=47466) (actual time=0.0408..65.9 rows=47654 loops=1) -> Filter: ((cbi.site = 1) and (cbi.publish_flag = 1) and (cbi.open_flag = 1) and (cbi.deleted_at is null)) (cost=0.25 rows=0.05) (actual time=0.00247..0.00256 rows=0.999 loops=47160) -> Single-row index lookup on cbi using PRIMARY (id=job_basic_informations.classroom_id) (cost=0.25 rows=1) (actual time=0.00219..0.00222 rows=1 loops=47160) -> Single-row index lookup on br using PRIMARY (id=cbi.brand_id) (cost=0.254 rows=1) (actual time=137e-6..165e-6 rows=1 loops=47120) -> Single-row covering index lookup on cp using PRIMARY (id=cbi.company_id) (cost=0.254 rows=1) (actual time=177e-6..204e-6 rows=1 loops=47120) -> Index lookup on csa using company_setting_admins_company_id_foreign (company_id=cbi.company_id) (cost=0.256 rows=1.01) (actual time=0.00204..0.00259 rows=1 loops=47120) -> Filter: (p.id = cbi.prefecture_id) (cost=0.253 rows=1) (actual time=378e-6..461e-6 rows=1 loops=47120) -> Single-row covering index lookup on p using PRIMARY (id=cbi.prefecture_id) (cost=0.253 rows=1) (actual time=226e-6..252e-6 rows=1 loops=47120) -> Single-row covering index lookup on c using PRIMARY (city_id=cbi.city_id) (cost=0.253 rows=1) (actual time=136e-6..162e-6 rows=1 loops=47120) -> Index lookup on jwgc using job_work_guidance_conditions_job_id_foreign (job_id=job_basic_informations.id) (cost=0.415 rows=1.09) (actual time=0.00164..0.00164 rows=0.00155 loops=47120) -> Index lookup on jatc using job_application_training_conditions_job_id_foreign (job_id=job_basic_informations.id) (cost=0.276 rows=1.09) (actual time=0.0016..0.0016 rows=0.00159 loops=47120) -> Covering index lookup on jac using job_application_conditions_job_id_foreign (job_id=job_basic_informations.id) (cost=0.254 rows=1.02) (actual time=0.0016..0.0016 rows=0.00127 loops=47120) -> Index lookup on jai using job_appeal_informations_job_id_foreign (job_id=job_basic_informations.id) (cost=0.697 rows=1.11) (actual time=0.00171..0.00172 rows=0.00142 loops=47120)]]> 修正後 EXPLAIN ANALYZE 結果 ： Sort: cbi.plan_priority, csa.group_station, job_basic_informations.`group`, job_basic_informations.updated_at DESC (actual time=921..945 rows=47120 loops=1) -> Stream results (cost=5670 rows=23.9) (actual time=2.2..757 rows=47120 loops=1) -> Nested loop left join (cost=5670 rows=23.9) (actual time=1.34..671 rows=47120 loops=1) -> Nested loop inner join (cost=5653 rows=23.9) (actual time=1.33..592 rows=47120 loops=1) -> Nested loop inner join (cost=5645 rows=23.9) (actual time=1.32..576 rows=47120 loops=1) -> Nested loop inner join (cost=5636 rows=23.7) (actual time=1.3..466 rows=47120 loops=1) -> Nested loop inner join (cost=5628 rows=23.7) (actual time=0.189..448 rows=47120 loops=1) -> Nested loop inner join (cost=5620 rows=23.7) (actual time=0.18..433 rows=47120 loops=1) -> Nested loop inner join (cost=5611 rows=23.7) (actual time=0.173..407 rows=47120 loops=1) -> Nested loop left join (cost=5445 rows=475) (actual time=0.0684..287 rows=47160 loops=1) -> Nested loop left join (cost=5279 rows=475) (actual time=0.0615..210 rows=47160 loops=1) -> Nested loop left join (cost=5113 rows=475) (actual time=0.0556..138 rows=47160 loops=1) -> Filter: ((job_basic_informations.publish_flag = 1) and (job_basic_informations.deleted_at is null)) (cost=4947 rows=475) (actual time=0.038..63 rows=47160 loops=1) -> Table scan on job_basic_informations (cost=4947 rows=47466) (actual time=0.0251..56 rows=47654 loops=1) -> Index lookup on jwgc using job_work_guidance_conditions_job_id_foreign (job_id=job_basic_informations.id) (cost=0.25 rows=1) (actual time=0.00143..0.00143 rows=0.00206 loops=47160) -> Index lookup on jatc using job_application_training_conditions_job_id_foreign (job_id=job_basic_informations.id) (cost=0.25 rows=1) (actual time=0.0014..0.0014 rows=0.00223 loops=47160) -> Covering index lookup on jac using job_application_conditions_job_id_foreign (job_id=job_basic_informations.id) (cost=0.25 rows=1) (actual time=0.00148..0.00148 rows=0.0017 loops=47160) -> Filter: ((cbi.site = 1) and (cbi.open_flag = 1) and (cbi.publish_flag = 1) and (cbi.deleted_at is null) and (cbi.prefecture_id is not null) and (cbi.city_id is not null)) (cost=0.25 rows=0.05) (actual time=0.00228..0.00236 rows=0.999 loops=47160) -> Single-row index lookup on cbi using PRIMARY (id=job_basic_informations.classroom_id) (cost=0.25 rows=1) (actual time=0.00196..0.00198 rows=1 loops=47160) -> Filter: (p.id = cbi.prefecture_id) (cost=0.254 rows=1) (actual time=303e-6..378e-6 rows=1 loops=47120) -> Single-row covering index lookup on p using PRIMARY (id=cbi.prefecture_id) (cost=0.254 rows=1) (actual time=166e-6..190e-6 rows=1 loops=47120) -> Single-row index lookup on br using PRIMARY (id=cbi.brand_id) (cost=0.254 rows=1) (actual time=118e-6..142e-6 rows=1 loops=47120) -> Single-row covering index lookup on cp using PRIMARY (id=cbi.company_id) (cost=0.254 rows=1) (actual time=177e-6..200e-6 rows=1 loops=47120) -> Index lookup on csa using company_setting_admins_company_id_foreign (company_id=cbi.company_id) (cost=0.256 rows=1.01) (actual time=0.00169..0.00215 rows=1 loops=47120) -> Single-row covering index lookup on c using PRIMARY (city_id=cbi.city_id) (cost=0.253 rows=1) (actual time=132e-6..156e-6 rows=1 loops=47120) -> Index lookup on jai using job_appeal_informations_job_id_foreign (job_id=job_basic_informations.id) (cost=0.629 rows=1) (actual time=0.00148..0.00148 rows=0.00142 loops=47120)]]> ✅ ステージング検証結果（本番DB複製） 検証日 ： 本番DBスナップショット日 ： 改善確認内容 ： 修正前と修正後のEXPLAIN ANALYZEの実行結果の比較 クエリの実行時間 レスポンス比較（Before/After） ： Before：24.891s After：0.9s 修正前クエリ ： 修正後クエリ ： 修正前 EXPLAIN ANALYZE 結果 ： Sort row IDs: field(any_value(cbi.plan),1,2,3,6,4,5), group_station, group_job, greatest(coalesce(any_value(job_basic_informations.updated_at),'0000-00-00 00:00:00'),coalesce(any_value(cast(cbi.latest_review_open_date as datetime)),'0000-00-00 00:00:00')) DESC (actual time=24579..24589 rows=14613 loops=1) -> Table scan on (cost=7051..7051 rows=0.265) (actual time=24558..24568 rows=14613 loops=1) -> Temporary table (cost=7049..7049 rows=0.265) (actual time=24558..24558 rows=14613 loops=1) -> Nested loop inner join (cost=7049 rows=0.265) (actual time=47.1..24246 rows=14613 loops=1) -> Nested loop left join (cost=7049 rows=0.265) (actual time=47..24210 rows=14613 loops=1) -> Nested loop left join (cost=7048 rows=0.265) (actual time=39.6..15868 rows=14613 loops=1) -> Nested loop left join (cost=7048 rows=0.265) (actual time=35.9..15657 rows=14613 loops=1) -> Nested loop left join (cost=7048 rows=0.265) (actual time=28.6..12265 rows=14613 loops=1) -> Nested loop left join (cost=7047 rows=0.265) (actual time=21.2..9387 rows=14613 loops=1) -> Nested loop left join (cost=7047 rows=0.265) (actual time=17.1..9340 rows=14613 loops=1) -> Nested loop left join (cost=7047 rows=0.265) (actual time=16.5..9305 rows=14613 loops=1) -> Nested loop inner join (cost=7047 rows=0.265) (actual time=13.6..9176 rows=14613 loops=1) -> Nested loop inner join (cost=7046 rows=0.265) (actual time=11.5..9120 rows=14613 loops=1) -> Filter: ((cbi.site = 1) and (cbi.publish_flag = 1) and (cbi.open_flag = 1) and (cbi.deleted_at is null)) (cost=7037 rows=5.3) (actual time=2.87..301 rows=10787 loops=1) -> Table scan on cbi (cost=7037 rows=52958) (actual time=2.86..290 rows=55620 loops=1) -> Filter: ((job_basic_informations.publish_flag = 1) and (job_basic_informations.deleted_at is null)) (cost=1.61 rows=0.05) (actual time=0.513..0.817 rows=1.35 loops=10787) -> Index lookup on job_basic_informations using job_basic_informations_classroom_id_foreign (classroom_id=cbi.id) (cost=1.61 rows=1.61) (actual time=0.424..0.816 rows=1.89 loops=10787) -> Single-row index lookup on br using PRIMARY (id=cbi.brand_id) (cost=1.34 rows=1) (actual time=0.00348..0.00351 rows=1 loops=14613) -> Index lookup on csa using company_setting_admins_company_id_foreign (company_id=cbi.company_id) (cost=1.34 rows=1) (actual time=0.00787..0.0086 rows=1 loops=14613) -> Filter: (p.id = cbi.prefecture_id) (cost=1.38 rows=1) (actual time=0.00197..0.00208 rows=1 loops=14613) -> Single-row covering index lookup on p using PRIMARY (id=cbi.prefecture_id) (cost=1.38 rows=1) (actual time=0.00164..0.00167 rows=1 loops=14613) -> Single-row covering index lookup on c using PRIMARY (city_id=cbi.city_id) (cost=1.38 rows=1) (actual time=0.00289..0.00292 rows=0.999 loops=14613) -> Index lookup on jwgc using job_work_guidance_conditions_job_id_foreign (job_id=job_basic_informations.id) (cost=1.38 rows=1) (actual time=0.196..0.197 rows=1 loops=14613) -> Index lookup on jatc using job_application_training_conditions_job_id_foreign (job_id=job_basic_informations.id) (cost=1.38 rows=1) (actual time=0.231..0.232 rows=0.999 loops=14613) -> Covering index lookup on jac using job_application_conditions_job_id_foreign (job_id=job_basic_informations.id) (cost=1.38 rows=1) (actual time=0.0134..0.0142 rows=1 loops=14613) -> Index lookup on jai using job_appeal_informations_job_id_foreign (job_id=job_basic_informations.id) (cost=1.38 rows=1) (actual time=0.569..0.571 rows=0.999 loops=14613) -> Single-row covering index lookup on cp using PRIMARY (id=cbi.company_id) (cost=0.628 rows=1) (actual time=0.00206..0.0021 rows=1 loops=14613) ]]> 修正後 EXPLAIN ANALYZE 結果 ： Sort: cbi.plan_priority, csa.group_station, job_basic_informations.`group`, job_basic_informations.updated_at DESC (actual time=696..753 rows=14595 loops=1) -> Stream results (cost=6811 rows=12.9) (actual time=0.227..582 rows=14595 loops=1) -> Nested loop left join (cost=6811 rows=12.9) (actual time=0.218..545 rows=14595 loops=1) -> Nested loop left join (cost=6800 rows=12.9) (actual time=0.201..475 rows=14595 loops=1) -> Nested loop left join (cost=6794 rows=12.9) (actual time=0.195..438 rows=14595 loops=1) -> Nested loop left join (cost=6784 rows=12.9) (actual time=0.18..374 rows=14595 loops=1) -> Nested loop inner join (cost=6774 rows=12.9) (actual time=0.165..303 rows=14595 loops=1) -> Nested loop inner join (cost=6770 rows=12.9) (actual time=0.156..286 rows=14595 loops=1) -> Nested loop inner join (cost=6765 rows=12.9) (actual time=0.144..228 rows=14595 loops=1) -> Nested loop inner join (cost=6761 rows=12.9) (actual time=0.137..215 rows=14595 loops=1) -> Nested loop inner join (cost=6756 rows=12.9) (actual time=0.131..193 rows=14595 loops=1) -> Nested loop inner join (cost=6752 rows=12.9) (actual time=0.124..174 rows=14595 loops=1) -> Filter: ((cbi.site = 1) and (cbi.open_flag = 1) and (cbi.publish_flag = 1) and (cbi.deleted_at is null) and (cbi.prefecture_id is not null) and (cbi.city_id is not null)) (cost=6607 rows=258) (actual time=0.0991..67 rows=10773 loops=1) -> Table scan on cbi (cost=6607 rows=51646) (actual time=0.0972..60.6 rows=55620 loops=1) -> Filter: ((job_basic_informations.publish_flag = 1) and (job_basic_informations.deleted_at is null)) (cost=0.401 rows=0.05) (actual time=0.00616..0.00969 rows=1.35 loops=10773) -> Index lookup on job_basic_informations using job_basic_informations_classroom_id_foreign (classroom_id=cbi.id) (cost=0.401 rows=1.61) (actual time=0.00536..0.00932 rows=1.89 loops=10773) -> Filter: (p.id = cbi.prefecture_id) (cost=0.258 rows=1) (actual time=0.00105..0.00112 rows=1 loops=14595) -> Single-row covering index lookup on p using PRIMARY (id=cbi.prefecture_id) (cost=0.258 rows=1) (actual time=894e-6..918e-6 rows=1 loops=14595) -> Single-row covering index lookup on c using PRIMARY (city_id=cbi.city_id) (cost=0.258 rows=1) (actual time=0.00129..0.00131 rows=1 loops=14595) -> Single-row index lookup on br using PRIMARY (id=cbi.brand_id) (cost=0.258 rows=1) (actual time=703e-6..726e-6 rows=1 loops=14595) -> Index lookup on csa using company_setting_admins_company_id_foreign (company_id=cbi.company_id) (cost=0.258 rows=1) (actual time=0.00327..0.0038 rows=1 loops=14595) -> Single-row covering index lookup on cp using PRIMARY (id=cbi.company_id) (cost=0.258 rows=1) (actual time=914e-6..938e-6 rows=1 loops=14595) -> Index lookup on jwgc using job_work_guidance_conditions_job_id_foreign (job_id=job_basic_informations.id) (cost=0.623 rows=1) (actual time=0.00423..0.00473 rows=1 loops=14595) -> Index lookup on jatc using job_application_training_conditions_job_id_foreign (job_id=job_basic_informations.id) (cost=0.706 rows=1) (actual time=0.00371..0.00422 rows=0.999 loops=14595) -> Covering index lookup on jac using job_application_conditions_job_id_foreign (job_id=job_basic_informations.id) (cost=0.354 rows=1) (actual time=0.00179..0.00236 rows=1 loops=14595) -> Index lookup on jai using job_appeal_informations_job_id_foreign (job_id=job_basic_informations.id) (cost=0.744 rows=1) (actual time=0.0039..0.00454 rows=0.999 loops=14595) ]]> 今後の本番のテーブルのインデックス想定 job_basic_informations PRIMARY（id） classroom_id（外部キー） created_by（外部キー） updated_by（外部キー） deleted_by（外部キー） updated_at（単一インデックス） classroom_basic_informations PRIMARY（id） company_id（外部キー） brand_id（外部キー） created_by（外部キー） updated_by（外部キー） plan_priority（単一インデックス） publish_flag, open_flag（複合インデックス） updated_at（単一インデックス） publich_flag 、open_flag 、 site 、deleted_at（複合インデックス） 🔁 変更概要 ： DB側 classroom_basic_informationsテーブルにplan_priorityカラムを追加 job_basic_informationsテーブル、classroom_basic_informationsテーブルに検索に使用するカラムに対して単一インデックス、複合インデックスを作成 アプリケーション側 条件なしの求人検索で使用されるクエリの構造を、パフォーマンス観点から最適な形に変更 plan が新規登録/変更されたときに plan_priority の値を登録/更新する処理の追加 🚀 本番反映・監視結果 リリース日 ： モニタリング結果 ：監視中 異常有無 ： なし あり（内容：＿＿＿＿＿＿）",
  "parentId": "1490976786",
  "parentTitle": "スロークエリ対応まとめ",
  "labels": [],
  "url": "/spaces/CLIENTTOMO/pages/1478754305/_",
  "spaceKey": "CLIENTTOMO",
  "lastModified": "2025-05-27T04:09:10.960Z",
  "author": "kotake_jin",
  "excerpt": "📌 基本情報 対象クエリ名 / 概要 ：サービスサイト_求人検索（条件なし）で使用されるクエリ 担当エンジニア ： PM ： 関連画面/API ：求人一覧 目的 ： 現在、複数のスロークエリがサイト全体のパフォーマンスに悪影響を及ぼしているため 🧭 作業進行ステータス（チェック形式） 36 36 complete 対象クエリの特定（ログ調査完了） 37 37 complete 改善方針の設計（..."
}