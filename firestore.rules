rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // 🔐 本番環境: 認証済みかつtomonokai-corp.comドメインのユーザーのみ
    function isAllowedUser() {
      return request.auth != null 
        && request.auth.token.email_verified == true
        && request.auth.token.email.matches('.*@tomonokai-corp\\.com$');
    }
    
    // 🧪 開発環境用: 認証をスキップ（本番デプロイ前に削除すること）
    // TODO: 本番デプロイ前に isDevMode() を削除してください
    function isDevMode() {
      // 開発環境では一時的に全アクセスを許可
      // 本番環境ではこの関数を必ず false にすること
      return true;  // ← 本番デプロイ前に false に変更
    }

    // 全てのドキュメントに対するアクセス制御
    match /{document=**} {
      allow read, write: if isAllowedUser() || isDevMode();
    }

    // ユーザー関連データ
    match /users/{userId} {
      allow read: if isAllowedUser() && request.auth.uid == userId;
      allow write: if isAllowedUser() && request.auth.uid == userId;
      
      // 会話履歴
      match /conversations/{conversationId} {
        allow read: if isAllowedUser() && request.auth.uid == userId;
        allow write: if isAllowedUser() && request.auth.uid == userId;
      }
    }

    // ユーザー設定
    match /userPreferences/{userId} {
      allow read: if isAllowedUser() && request.auth.uid == userId;
      allow write: if isAllowedUser() && request.auth.uid == userId;
    }

    // システムメトリクス（管理者のみ）
    match /systemMetrics/{metricId} {
      allow read, write: if isAllowedUser();
    }

    // 管理者権限の確認関数
    function isAdmin() {
      return isAllowedUser() && 
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
    }

    // 管理者専用コレクション
    match /adminLogs/{logId} {
      allow read, write: if isAdmin();
    }

    match /postLogs/{logId} {
      allow read: if isAdmin();
      allow write: if isAllowedUser();
    }

    // ユーザーフィードバック
    match /feedback/{feedbackId} {
      allow read: if isAllowedUser();
      allow write: if isAllowedUser() && request.auth.uid == request.resource.data.userId;
    }
  }
}